---
layout: post
title: "六边形架构实践指南（一）——基本包结构和架构测试"
date: 2020-04-30
---

# 什么是六边形架构

六边形架构是一种架构风格，也被称为“端口与适配器”模式，最早由 [Alistair Cockburn](https://alistair.cockburn.us/hexagonal-architecture/) 提出。Alistair 基于应用程序应该平等地被用户，自动化测试脚本，以及其他程序所驱动的理念，提出了。。。

在微服务大行其道的今天，使用六边形架构作为单个服务的代码架构模式具备如下好处：

- 六边形架构形成了更清晰的业务技术边界，这是符合微服务和 DDD 的要求的；
- 六边形架构可以满足微服务要求的大量技术适配需求；
- 六边形架构允许架构师进行技术演进，这对于快速构建和迭代产品是非常必要的；
- 六边形架构具备良好的可测试性。

下面我们以一个网上书店的 Java 代码作为例子，逐一进行分析。

## 更清晰的业务技术边界

随着微服务时代的到来，面向业务划分领域和限界上下文的 DDD 逐渐成为架构师们划分微服务的事实依据。DDD 要求程序员更加关注对象的行为而不是数据，这与传统的面向数据建模，以及配套使用的 ORM 框架的理念大相径庭。

在实际项目中，仍然可以看到大量的面向数据库和 ORM 框架能力的编程方式，这导致了作为 DDD 产出物的实体和值对象等概念很难真正应用到具体开发当中。例如，代码片段 1 当中，程序员需要为网上书店构建一个搜索结果，其中包含匹配的数据总数以及前 30 条匹配数据

# 微服务架构下产生了大量的技术适配要求

微服务时代

# 可演进性

# 可测试性
